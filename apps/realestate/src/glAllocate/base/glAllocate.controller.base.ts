/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GlAllocateService } from "../glAllocate.service";
import { GlAllocateCreateInput } from "./GlAllocateCreateInput";
import { GlAllocateWhereInput } from "./GlAllocateWhereInput";
import { GlAllocateWhereUniqueInput } from "./GlAllocateWhereUniqueInput";
import { GlAllocateFindManyArgs } from "./GlAllocateFindManyArgs";
import { GlAllocateUpdateInput } from "./GlAllocateUpdateInput";
import { GlAllocate } from "./GlAllocate";

export class GlAllocateControllerBase {
  constructor(protected readonly service: GlAllocateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GlAllocate })
  async create(
    @common.Body() data: GlAllocateCreateInput
  ): Promise<GlAllocate> {
    return await this.service.create({
      data: data,
      select: {
        bcustomsource: true,
        haccttree: true,
        haccttreedetail: true,
        hchart: true,
        hoffsetacct: true,
        ibalancebydetails: true,
        ibalancingsource: true,
        iconsolidatebooks: true,
        id: true,
        idelta: true,
        idetail: true,
        iincludesourcesegments: true,
        iincludeuserdeffields: true,
        iintercompany: true,
        ipropertysegment: true,
        ireverseje: true,
        isqftcolumn: true,
        isuppresssegment: true,
        iunpostbatch: true,
        scode: true,
        scolumnname: true,
        sdatecolumn: true,
        sfrombook: true,
        sname: true,
        snotes: true,
        sreference: true,
        ssourcecolumnname: true,
        ssourcedatecolumn: true,
        ssourcetablename: true,
        ssourcetype: true,
        stablename: true,
        stype: true,
        suserdef1: true,
        suserdef2: true,
        suserdef3: true,
        suserdef4: true,
        suserdef5: true,
        suserdef6: true,
        suserdef7: true,
        suserdef8: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GlAllocate] })
  @ApiNestedQuery(GlAllocateFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<GlAllocate[]> {
    const args = plainToClass(GlAllocateFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        bcustomsource: true,
        haccttree: true,
        haccttreedetail: true,
        hchart: true,
        hoffsetacct: true,
        ibalancebydetails: true,
        ibalancingsource: true,
        iconsolidatebooks: true,
        id: true,
        idelta: true,
        idetail: true,
        iincludesourcesegments: true,
        iincludeuserdeffields: true,
        iintercompany: true,
        ipropertysegment: true,
        ireverseje: true,
        isqftcolumn: true,
        isuppresssegment: true,
        iunpostbatch: true,
        scode: true,
        scolumnname: true,
        sdatecolumn: true,
        sfrombook: true,
        sname: true,
        snotes: true,
        sreference: true,
        ssourcecolumnname: true,
        ssourcedatecolumn: true,
        ssourcetablename: true,
        ssourcetype: true,
        stablename: true,
        stype: true,
        suserdef1: true,
        suserdef2: true,
        suserdef3: true,
        suserdef4: true,
        suserdef5: true,
        suserdef6: true,
        suserdef7: true,
        suserdef8: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GlAllocate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: GlAllocateWhereUniqueInput
  ): Promise<GlAllocate | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        bcustomsource: true,
        haccttree: true,
        haccttreedetail: true,
        hchart: true,
        hoffsetacct: true,
        ibalancebydetails: true,
        ibalancingsource: true,
        iconsolidatebooks: true,
        id: true,
        idelta: true,
        idetail: true,
        iincludesourcesegments: true,
        iincludeuserdeffields: true,
        iintercompany: true,
        ipropertysegment: true,
        ireverseje: true,
        isqftcolumn: true,
        isuppresssegment: true,
        iunpostbatch: true,
        scode: true,
        scolumnname: true,
        sdatecolumn: true,
        sfrombook: true,
        sname: true,
        snotes: true,
        sreference: true,
        ssourcecolumnname: true,
        ssourcedatecolumn: true,
        ssourcetablename: true,
        ssourcetype: true,
        stablename: true,
        stype: true,
        suserdef1: true,
        suserdef2: true,
        suserdef3: true,
        suserdef4: true,
        suserdef5: true,
        suserdef6: true,
        suserdef7: true,
        suserdef8: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GlAllocate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: GlAllocateWhereUniqueInput,
    @common.Body() data: GlAllocateUpdateInput
  ): Promise<GlAllocate | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          bcustomsource: true,
          haccttree: true,
          haccttreedetail: true,
          hchart: true,
          hoffsetacct: true,
          ibalancebydetails: true,
          ibalancingsource: true,
          iconsolidatebooks: true,
          id: true,
          idelta: true,
          idetail: true,
          iincludesourcesegments: true,
          iincludeuserdeffields: true,
          iintercompany: true,
          ipropertysegment: true,
          ireverseje: true,
          isqftcolumn: true,
          isuppresssegment: true,
          iunpostbatch: true,
          scode: true,
          scolumnname: true,
          sdatecolumn: true,
          sfrombook: true,
          sname: true,
          snotes: true,
          sreference: true,
          ssourcecolumnname: true,
          ssourcedatecolumn: true,
          ssourcetablename: true,
          ssourcetype: true,
          stablename: true,
          stype: true,
          suserdef1: true,
          suserdef2: true,
          suserdef3: true,
          suserdef4: true,
          suserdef5: true,
          suserdef6: true,
          suserdef7: true,
          suserdef8: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GlAllocate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: GlAllocateWhereUniqueInput
  ): Promise<GlAllocate | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          bcustomsource: true,
          haccttree: true,
          haccttreedetail: true,
          hchart: true,
          hoffsetacct: true,
          ibalancebydetails: true,
          ibalancingsource: true,
          iconsolidatebooks: true,
          id: true,
          idelta: true,
          idetail: true,
          iincludesourcesegments: true,
          iincludeuserdeffields: true,
          iintercompany: true,
          ipropertysegment: true,
          ireverseje: true,
          isqftcolumn: true,
          isuppresssegment: true,
          iunpostbatch: true,
          scode: true,
          scolumnname: true,
          sdatecolumn: true,
          sfrombook: true,
          sname: true,
          snotes: true,
          sreference: true,
          ssourcecolumnname: true,
          ssourcedatecolumn: true,
          ssourcetablename: true,
          ssourcetype: true,
          stablename: true,
          stype: true,
          suserdef1: true,
          suserdef2: true,
          suserdef3: true,
          suserdef4: true,
          suserdef5: true,
          suserdef6: true,
          suserdef7: true,
          suserdef8: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
