/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateGlAllocateArgs } from "./CreateGlAllocateArgs";
import { UpdateGlAllocateArgs } from "./UpdateGlAllocateArgs";
import { DeleteGlAllocateArgs } from "./DeleteGlAllocateArgs";
import { GlAllocateCountArgs } from "./GlAllocateCountArgs";
import { GlAllocateFindManyArgs } from "./GlAllocateFindManyArgs";
import { GlAllocateFindUniqueArgs } from "./GlAllocateFindUniqueArgs";
import { GlAllocate } from "./GlAllocate";
import { GlAllocateService } from "../glAllocate.service";
@graphql.Resolver(() => GlAllocate)
export class GlAllocateResolverBase {
  constructor(protected readonly service: GlAllocateService) {}

  async _glAllocatesMeta(
    @graphql.Args() args: GlAllocateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GlAllocate])
  async glAllocates(
    @graphql.Args() args: GlAllocateFindManyArgs
  ): Promise<GlAllocate[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => GlAllocate, { nullable: true })
  async glAllocate(
    @graphql.Args() args: GlAllocateFindUniqueArgs
  ): Promise<GlAllocate | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GlAllocate)
  async createGlAllocate(
    @graphql.Args() args: CreateGlAllocateArgs
  ): Promise<GlAllocate> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GlAllocate)
  async updateGlAllocate(
    @graphql.Args() args: UpdateGlAllocateArgs
  ): Promise<GlAllocate | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GlAllocate)
  async deleteGlAllocate(
    @graphql.Args() args: DeleteGlAllocateArgs
  ): Promise<GlAllocate | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
