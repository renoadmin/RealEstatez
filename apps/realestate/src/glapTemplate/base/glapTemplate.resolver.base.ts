/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateGlapTemplateArgs } from "./CreateGlapTemplateArgs";
import { UpdateGlapTemplateArgs } from "./UpdateGlapTemplateArgs";
import { DeleteGlapTemplateArgs } from "./DeleteGlapTemplateArgs";
import { GlapTemplateCountArgs } from "./GlapTemplateCountArgs";
import { GlapTemplateFindManyArgs } from "./GlapTemplateFindManyArgs";
import { GlapTemplateFindUniqueArgs } from "./GlapTemplateFindUniqueArgs";
import { GlapTemplate } from "./GlapTemplate";
import { GlapTemplateService } from "../glapTemplate.service";
@graphql.Resolver(() => GlapTemplate)
export class GlapTemplateResolverBase {
  constructor(protected readonly service: GlapTemplateService) {}

  async _glapTemplatesMeta(
    @graphql.Args() args: GlapTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GlapTemplate])
  async glapTemplates(
    @graphql.Args() args: GlapTemplateFindManyArgs
  ): Promise<GlapTemplate[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => GlapTemplate, { nullable: true })
  async glapTemplate(
    @graphql.Args() args: GlapTemplateFindUniqueArgs
  ): Promise<GlapTemplate | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GlapTemplate)
  async createGlapTemplate(
    @graphql.Args() args: CreateGlapTemplateArgs
  ): Promise<GlapTemplate> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GlapTemplate)
  async updateGlapTemplate(
    @graphql.Args() args: UpdateGlapTemplateArgs
  ): Promise<GlapTemplate | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GlapTemplate)
  async deleteGlapTemplate(
    @graphql.Args() args: DeleteGlapTemplateArgs
  ): Promise<GlapTemplate | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
