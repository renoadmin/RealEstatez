/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GlapTemplateService } from "../glapTemplate.service";
import { GlapTemplateCreateInput } from "./GlapTemplateCreateInput";
import { GlapTemplateWhereInput } from "./GlapTemplateWhereInput";
import { GlapTemplateWhereUniqueInput } from "./GlapTemplateWhereUniqueInput";
import { GlapTemplateFindManyArgs } from "./GlapTemplateFindManyArgs";
import { GlapTemplateUpdateInput } from "./GlapTemplateUpdateInput";
import { GlapTemplate } from "./GlapTemplate";

export class GlapTemplateControllerBase {
  constructor(protected readonly service: GlapTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GlapTemplate })
  async create(
    @common.Body() data: GlapTemplateCreateInput
  ): Promise<GlapTemplate> {
    return await this.service.create({
      data: data,
      select: {
        binactive: true,
        bvalid: true,
        dtlastposted: true,
        dtrangefrom: true,
        dtrangeto: true,
        haccrualacct: true,
        hcompany: true,
        hfunding: true,
        hoffsetacct: true,
        hperson: true,
        iapr: true,
        iaug: true,
        id: true,
        idec: true,
        idisplaytype: true,
        idueday: true,
        ifeb: true,
        ijan: true,
        ijul: true,
        ijun: true,
        imar: true,
        imay: true,
        inov: true,
        ioct: true,
        irecurday: true,
        isep: true,
        istatus: true,
        samount: true,
        scode: true,
        sdesc: true,
        sexpensetype: true,
        snotes: true,
        spostcode: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GlapTemplate] })
  @ApiNestedQuery(GlapTemplateFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<GlapTemplate[]> {
    const args = plainToClass(GlapTemplateFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        binactive: true,
        bvalid: true,
        dtlastposted: true,
        dtrangefrom: true,
        dtrangeto: true,
        haccrualacct: true,
        hcompany: true,
        hfunding: true,
        hoffsetacct: true,
        hperson: true,
        iapr: true,
        iaug: true,
        id: true,
        idec: true,
        idisplaytype: true,
        idueday: true,
        ifeb: true,
        ijan: true,
        ijul: true,
        ijun: true,
        imar: true,
        imay: true,
        inov: true,
        ioct: true,
        irecurday: true,
        isep: true,
        istatus: true,
        samount: true,
        scode: true,
        sdesc: true,
        sexpensetype: true,
        snotes: true,
        spostcode: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GlapTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: GlapTemplateWhereUniqueInput
  ): Promise<GlapTemplate | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        binactive: true,
        bvalid: true,
        dtlastposted: true,
        dtrangefrom: true,
        dtrangeto: true,
        haccrualacct: true,
        hcompany: true,
        hfunding: true,
        hoffsetacct: true,
        hperson: true,
        iapr: true,
        iaug: true,
        id: true,
        idec: true,
        idisplaytype: true,
        idueday: true,
        ifeb: true,
        ijan: true,
        ijul: true,
        ijun: true,
        imar: true,
        imay: true,
        inov: true,
        ioct: true,
        irecurday: true,
        isep: true,
        istatus: true,
        samount: true,
        scode: true,
        sdesc: true,
        sexpensetype: true,
        snotes: true,
        spostcode: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GlapTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: GlapTemplateWhereUniqueInput,
    @common.Body() data: GlapTemplateUpdateInput
  ): Promise<GlapTemplate | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          binactive: true,
          bvalid: true,
          dtlastposted: true,
          dtrangefrom: true,
          dtrangeto: true,
          haccrualacct: true,
          hcompany: true,
          hfunding: true,
          hoffsetacct: true,
          hperson: true,
          iapr: true,
          iaug: true,
          id: true,
          idec: true,
          idisplaytype: true,
          idueday: true,
          ifeb: true,
          ijan: true,
          ijul: true,
          ijun: true,
          imar: true,
          imay: true,
          inov: true,
          ioct: true,
          irecurday: true,
          isep: true,
          istatus: true,
          samount: true,
          scode: true,
          sdesc: true,
          sexpensetype: true,
          snotes: true,
          spostcode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GlapTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: GlapTemplateWhereUniqueInput
  ): Promise<GlapTemplate | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          binactive: true,
          bvalid: true,
          dtlastposted: true,
          dtrangefrom: true,
          dtrangeto: true,
          haccrualacct: true,
          hcompany: true,
          hfunding: true,
          hoffsetacct: true,
          hperson: true,
          iapr: true,
          iaug: true,
          id: true,
          idec: true,
          idisplaytype: true,
          idueday: true,
          ifeb: true,
          ijan: true,
          ijul: true,
          ijun: true,
          imar: true,
          imay: true,
          inov: true,
          ioct: true,
          irecurday: true,
          isep: true,
          istatus: true,
          samount: true,
          scode: true,
          sdesc: true,
          sexpensetype: true,
          snotes: true,
          spostcode: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
