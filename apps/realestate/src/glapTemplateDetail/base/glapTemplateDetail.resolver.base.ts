/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateGlapTemplateDetailArgs } from "./CreateGlapTemplateDetailArgs";
import { UpdateGlapTemplateDetailArgs } from "./UpdateGlapTemplateDetailArgs";
import { DeleteGlapTemplateDetailArgs } from "./DeleteGlapTemplateDetailArgs";
import { GlapTemplateDetailCountArgs } from "./GlapTemplateDetailCountArgs";
import { GlapTemplateDetailFindManyArgs } from "./GlapTemplateDetailFindManyArgs";
import { GlapTemplateDetailFindUniqueArgs } from "./GlapTemplateDetailFindUniqueArgs";
import { GlapTemplateDetail } from "./GlapTemplateDetail";
import { GlapTemplateDetailService } from "../glapTemplateDetail.service";
@graphql.Resolver(() => GlapTemplateDetail)
export class GlapTemplateDetailResolverBase {
  constructor(protected readonly service: GlapTemplateDetailService) {}

  async _glapTemplateDetailsMeta(
    @graphql.Args() args: GlapTemplateDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GlapTemplateDetail])
  async glapTemplateDetails(
    @graphql.Args() args: GlapTemplateDetailFindManyArgs
  ): Promise<GlapTemplateDetail[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => GlapTemplateDetail, { nullable: true })
  async glapTemplateDetail(
    @graphql.Args() args: GlapTemplateDetailFindUniqueArgs
  ): Promise<GlapTemplateDetail | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GlapTemplateDetail)
  async createGlapTemplateDetail(
    @graphql.Args() args: CreateGlapTemplateDetailArgs
  ): Promise<GlapTemplateDetail> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GlapTemplateDetail)
  async updateGlapTemplateDetail(
    @graphql.Args() args: UpdateGlapTemplateDetailArgs
  ): Promise<GlapTemplateDetail | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GlapTemplateDetail)
  async deleteGlapTemplateDetail(
    @graphql.Args() args: DeleteGlapTemplateDetailArgs
  ): Promise<GlapTemplateDetail | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
