/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateGlAllocateDetailArgs } from "./CreateGlAllocateDetailArgs";
import { UpdateGlAllocateDetailArgs } from "./UpdateGlAllocateDetailArgs";
import { DeleteGlAllocateDetailArgs } from "./DeleteGlAllocateDetailArgs";
import { GlAllocateDetailCountArgs } from "./GlAllocateDetailCountArgs";
import { GlAllocateDetailFindManyArgs } from "./GlAllocateDetailFindManyArgs";
import { GlAllocateDetailFindUniqueArgs } from "./GlAllocateDetailFindUniqueArgs";
import { GlAllocateDetail } from "./GlAllocateDetail";
import { GlAllocateDetailService } from "../glAllocateDetail.service";
@graphql.Resolver(() => GlAllocateDetail)
export class GlAllocateDetailResolverBase {
  constructor(protected readonly service: GlAllocateDetailService) {}

  async _glAllocateDetailsMeta(
    @graphql.Args() args: GlAllocateDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GlAllocateDetail])
  async glAllocateDetails(
    @graphql.Args() args: GlAllocateDetailFindManyArgs
  ): Promise<GlAllocateDetail[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => GlAllocateDetail, { nullable: true })
  async glAllocateDetail(
    @graphql.Args() args: GlAllocateDetailFindUniqueArgs
  ): Promise<GlAllocateDetail | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GlAllocateDetail)
  async createGlAllocateDetail(
    @graphql.Args() args: CreateGlAllocateDetailArgs
  ): Promise<GlAllocateDetail> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GlAllocateDetail)
  async updateGlAllocateDetail(
    @graphql.Args() args: UpdateGlAllocateDetailArgs
  ): Promise<GlAllocateDetail | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GlAllocateDetail)
  async deleteGlAllocateDetail(
    @graphql.Args() args: DeleteGlAllocateDetailArgs
  ): Promise<GlAllocateDetail | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
