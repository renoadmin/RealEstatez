/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GlAllocateDetailService } from "../glAllocateDetail.service";
import { GlAllocateDetailCreateInput } from "./GlAllocateDetailCreateInput";
import { GlAllocateDetailWhereInput } from "./GlAllocateDetailWhereInput";
import { GlAllocateDetailWhereUniqueInput } from "./GlAllocateDetailWhereUniqueInput";
import { GlAllocateDetailFindManyArgs } from "./GlAllocateDetailFindManyArgs";
import { GlAllocateDetailUpdateInput } from "./GlAllocateDetailUpdateInput";
import { GlAllocateDetail } from "./GlAllocateDetail";

export class GlAllocateDetailControllerBase {
  constructor(protected readonly service: GlAllocateDetailService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GlAllocateDetail })
  async create(
    @common.Body() data: GlAllocateDetailCreateInput
  ): Promise<GlAllocateDetail> {
    return await this.service.create({
      data: data,
      select: {
        dfactor: true,
        hacct: true,
        haccttreedetail: true,
        hfromacct: true,
        hglallocate: true,
        hoffsetacct: true,
        ibudget: true,
        id: true,
        iexclude: true,
        igroup: true,
        inegate: true,
        iorder: true,
        iptd: true,
        sacctdescription: true,
        sacctnode: true,
        sbook: true,
        scalctype: true,
        sformula: true,
        snotes: true,
        spropertylist: true,
        ssegment1: true,
        ssegment10: true,
        ssegment11: true,
        ssegment12: true,
        ssegment2: true,
        ssegment3: true,
        ssegment4: true,
        ssegment5: true,
        ssegment6: true,
        ssegment7: true,
        ssegment8: true,
        ssegment9: true,
        stocolumnname: true,
        stype: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GlAllocateDetail] })
  @ApiNestedQuery(GlAllocateDetailFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<GlAllocateDetail[]> {
    const args = plainToClass(GlAllocateDetailFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        dfactor: true,
        hacct: true,
        haccttreedetail: true,
        hfromacct: true,
        hglallocate: true,
        hoffsetacct: true,
        ibudget: true,
        id: true,
        iexclude: true,
        igroup: true,
        inegate: true,
        iorder: true,
        iptd: true,
        sacctdescription: true,
        sacctnode: true,
        sbook: true,
        scalctype: true,
        sformula: true,
        snotes: true,
        spropertylist: true,
        ssegment1: true,
        ssegment10: true,
        ssegment11: true,
        ssegment12: true,
        ssegment2: true,
        ssegment3: true,
        ssegment4: true,
        ssegment5: true,
        ssegment6: true,
        ssegment7: true,
        ssegment8: true,
        ssegment9: true,
        stocolumnname: true,
        stype: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GlAllocateDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: GlAllocateDetailWhereUniqueInput
  ): Promise<GlAllocateDetail | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        dfactor: true,
        hacct: true,
        haccttreedetail: true,
        hfromacct: true,
        hglallocate: true,
        hoffsetacct: true,
        ibudget: true,
        id: true,
        iexclude: true,
        igroup: true,
        inegate: true,
        iorder: true,
        iptd: true,
        sacctdescription: true,
        sacctnode: true,
        sbook: true,
        scalctype: true,
        sformula: true,
        snotes: true,
        spropertylist: true,
        ssegment1: true,
        ssegment10: true,
        ssegment11: true,
        ssegment12: true,
        ssegment2: true,
        ssegment3: true,
        ssegment4: true,
        ssegment5: true,
        ssegment6: true,
        ssegment7: true,
        ssegment8: true,
        ssegment9: true,
        stocolumnname: true,
        stype: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GlAllocateDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: GlAllocateDetailWhereUniqueInput,
    @common.Body() data: GlAllocateDetailUpdateInput
  ): Promise<GlAllocateDetail | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          dfactor: true,
          hacct: true,
          haccttreedetail: true,
          hfromacct: true,
          hglallocate: true,
          hoffsetacct: true,
          ibudget: true,
          id: true,
          iexclude: true,
          igroup: true,
          inegate: true,
          iorder: true,
          iptd: true,
          sacctdescription: true,
          sacctnode: true,
          sbook: true,
          scalctype: true,
          sformula: true,
          snotes: true,
          spropertylist: true,
          ssegment1: true,
          ssegment10: true,
          ssegment11: true,
          ssegment12: true,
          ssegment2: true,
          ssegment3: true,
          ssegment4: true,
          ssegment5: true,
          ssegment6: true,
          ssegment7: true,
          ssegment8: true,
          ssegment9: true,
          stocolumnname: true,
          stype: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GlAllocateDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: GlAllocateDetailWhereUniqueInput
  ): Promise<GlAllocateDetail | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          dfactor: true,
          hacct: true,
          haccttreedetail: true,
          hfromacct: true,
          hglallocate: true,
          hoffsetacct: true,
          ibudget: true,
          id: true,
          iexclude: true,
          igroup: true,
          inegate: true,
          iorder: true,
          iptd: true,
          sacctdescription: true,
          sacctnode: true,
          sbook: true,
          scalctype: true,
          sformula: true,
          snotes: true,
          spropertylist: true,
          ssegment1: true,
          ssegment10: true,
          ssegment11: true,
          ssegment12: true,
          ssegment2: true,
          ssegment3: true,
          ssegment4: true,
          ssegment5: true,
          ssegment6: true,
          ssegment7: true,
          ssegment8: true,
          ssegment9: true,
          stocolumnname: true,
          stype: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
