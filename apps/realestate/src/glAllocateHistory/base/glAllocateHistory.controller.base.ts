/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GlAllocateHistoryService } from "../glAllocateHistory.service";
import { GlAllocateHistoryCreateInput } from "./GlAllocateHistoryCreateInput";
import { GlAllocateHistoryWhereInput } from "./GlAllocateHistoryWhereInput";
import { GlAllocateHistoryWhereUniqueInput } from "./GlAllocateHistoryWhereUniqueInput";
import { GlAllocateHistoryFindManyArgs } from "./GlAllocateHistoryFindManyArgs";
import { GlAllocateHistoryUpdateInput } from "./GlAllocateHistoryUpdateInput";
import { GlAllocateHistory } from "./GlAllocateHistory";

export class GlAllocateHistoryControllerBase {
  constructor(protected readonly service: GlAllocateHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GlAllocateHistory })
  async create(
    @common.Body() data: GlAllocateHistoryCreateInput
  ): Promise<GlAllocateHistory> {
    return await this.service.create({
      data: data,
      select: {
        hacct: true,
        hbatch: true,
        hje: true,
        hppty: true,
        ibook: true,
        id: true,
        sbegin: true,
        sbeginbudget: true,
        sbudget: true,
        smtd: true,
        ssegment1: true,
        ssegment10: true,
        ssegment11: true,
        ssegment12: true,
        ssegment2: true,
        ssegment3: true,
        ssegment4: true,
        ssegment5: true,
        ssegment6: true,
        ssegment7: true,
        ssegment8: true,
        ssegment9: true,
        umonth: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GlAllocateHistory] })
  @ApiNestedQuery(GlAllocateHistoryFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<GlAllocateHistory[]> {
    const args = plainToClass(GlAllocateHistoryFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        hacct: true,
        hbatch: true,
        hje: true,
        hppty: true,
        ibook: true,
        id: true,
        sbegin: true,
        sbeginbudget: true,
        sbudget: true,
        smtd: true,
        ssegment1: true,
        ssegment10: true,
        ssegment11: true,
        ssegment12: true,
        ssegment2: true,
        ssegment3: true,
        ssegment4: true,
        ssegment5: true,
        ssegment6: true,
        ssegment7: true,
        ssegment8: true,
        ssegment9: true,
        umonth: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GlAllocateHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async findOne(
    @common.Param() params: GlAllocateHistoryWhereUniqueInput
  ): Promise<GlAllocateHistory | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        hacct: true,
        hbatch: true,
        hje: true,
        hppty: true,
        ibook: true,
        id: true,
        sbegin: true,
        sbeginbudget: true,
        sbudget: true,
        smtd: true,
        ssegment1: true,
        ssegment10: true,
        ssegment11: true,
        ssegment12: true,
        ssegment2: true,
        ssegment3: true,
        ssegment4: true,
        ssegment5: true,
        ssegment6: true,
        ssegment7: true,
        ssegment8: true,
        ssegment9: true,
        umonth: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GlAllocateHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async update(
    @common.Param() params: GlAllocateHistoryWhereUniqueInput,
    @common.Body() data: GlAllocateHistoryUpdateInput
  ): Promise<GlAllocateHistory | null> {
    try {
      return await this.service.update({
        where: params,
        data: data,
        select: {
          hacct: true,
          hbatch: true,
          hje: true,
          hppty: true,
          ibook: true,
          id: true,
          sbegin: true,
          sbeginbudget: true,
          sbudget: true,
          smtd: true,
          ssegment1: true,
          ssegment10: true,
          ssegment11: true,
          ssegment12: true,
          ssegment2: true,
          ssegment3: true,
          ssegment4: true,
          ssegment5: true,
          ssegment6: true,
          ssegment7: true,
          ssegment8: true,
          ssegment9: true,
          umonth: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GlAllocateHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async delete(
    @common.Param() params: GlAllocateHistoryWhereUniqueInput
  ): Promise<GlAllocateHistory | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          hacct: true,
          hbatch: true,
          hje: true,
          hppty: true,
          ibook: true,
          id: true,
          sbegin: true,
          sbeginbudget: true,
          sbudget: true,
          smtd: true,
          ssegment1: true,
          ssegment10: true,
          ssegment11: true,
          ssegment12: true,
          ssegment2: true,
          ssegment3: true,
          ssegment4: true,
          ssegment5: true,
          ssegment6: true,
          ssegment7: true,
          ssegment8: true,
          ssegment9: true,
          umonth: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
