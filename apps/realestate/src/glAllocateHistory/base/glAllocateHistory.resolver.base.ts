/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateGlAllocateHistoryArgs } from "./CreateGlAllocateHistoryArgs";
import { UpdateGlAllocateHistoryArgs } from "./UpdateGlAllocateHistoryArgs";
import { DeleteGlAllocateHistoryArgs } from "./DeleteGlAllocateHistoryArgs";
import { GlAllocateHistoryCountArgs } from "./GlAllocateHistoryCountArgs";
import { GlAllocateHistoryFindManyArgs } from "./GlAllocateHistoryFindManyArgs";
import { GlAllocateHistoryFindUniqueArgs } from "./GlAllocateHistoryFindUniqueArgs";
import { GlAllocateHistory } from "./GlAllocateHistory";
import { GlAllocateHistoryService } from "../glAllocateHistory.service";
@graphql.Resolver(() => GlAllocateHistory)
export class GlAllocateHistoryResolverBase {
  constructor(protected readonly service: GlAllocateHistoryService) {}

  async _glAllocateHistoriesMeta(
    @graphql.Args() args: GlAllocateHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GlAllocateHistory])
  async glAllocateHistories(
    @graphql.Args() args: GlAllocateHistoryFindManyArgs
  ): Promise<GlAllocateHistory[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => GlAllocateHistory, { nullable: true })
  async glAllocateHistory(
    @graphql.Args() args: GlAllocateHistoryFindUniqueArgs
  ): Promise<GlAllocateHistory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GlAllocateHistory)
  async createGlAllocateHistory(
    @graphql.Args() args: CreateGlAllocateHistoryArgs
  ): Promise<GlAllocateHistory> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GlAllocateHistory)
  async updateGlAllocateHistory(
    @graphql.Args() args: UpdateGlAllocateHistoryArgs
  ): Promise<GlAllocateHistory | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GlAllocateHistory)
  async deleteGlAllocateHistory(
    @graphql.Args() args: DeleteGlAllocateHistoryArgs
  ): Promise<GlAllocateHistory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
